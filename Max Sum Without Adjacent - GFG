class Solution{
public:	
	// calculate the maximum sum with out adjacent
	
	//MEmoization 
	
	int solve(int *arr , int n,vector<int>& dp)
	{
	    if(n == 0)
	       return arr[n];
	    if(n < 0)
	      return 0;
	      if(dp[n] != -1)
	        return dp[n];
	     int pick = arr[n] + solve(arr,n-2,dp);
	     int not_pick = solve(arr,n-1,dp);
	   return dp[n] = max(pick,not_pick);  
	}
	
	
	
	//tabulation
	
	int findMaxSum(int *arr, int n) {
	    vector<int>dp(n+1,-1);
	    dp[0] = arr[0];
	    dp[1] = max(arr[0],arr[1]);
	    
	    for(int i = 2;i<n;i++)
	    {
	        dp[i] = max(arr[i]+dp[i-2],dp[i-1]);
	    }
	    
	 return dp[n-1];  
	}

    
     //space optimization
     

	
	int findMaxSum(int *arr, int n) {
	    if(n ==1)
	    return arr[0];
	    if(n==2)
	    return max(arr[0],arr[1]);
	    int prev2 = arr[0];
	    int prev = max(arr[0],arr[1]);
	    int curr=prev;
	  
	    for(int i = 2;i<n;i++)
	    {
	        curr = max(arr[i]+prev2,prev);
	        prev2= prev;
	        prev = curr;
	    }
	    
	 return curr;  
	}

};
