class Solution {
public:
    
    
    
    //recursive soln
    
    

    int soln(int gind,int amount,vector<int>& coins,vector<vector<int>>& dp)
    {
        if(gind == 0)
        {
            if(amount%coins[0] == 0)
                return amount/coins[0];
            return 1e9;
        }
        if(dp[gind][amount] != -1)
            return dp[gind][amount];
        
        int not_pick = 0 + soln(gind-1,amount,coins,dp);
        int pick = 1e9;
        
        if(coins[gind] <= amount)
            pick = 1+soln(gind,amount-coins[gind],coins,dp);
        
        return dp[gind][amount]=min(pick,not_pick);
    }
    
    
    //tabulation 
    
    int coinChange(vector<int>& coins, int amount) {
        int n = coins.size();
        vector<vector<int>> dp(n+1,vector<int>(amount+1,0));
        
        for(int i = 0 ;i<=amount;i++)
        {
            if(i%coins[0] == 0)
                 dp[0][i] = i/coins[0];
             else
                 dp[0][i] = 1e9; 
        }
    
        for(int i = 1;i<n;i++)
        {
            for(int curr = 0;curr <= amount;curr++)
            {
                 int not_pick = 0 + dp[i-1][curr];
                 int pick = 1e9;
        
                 if(coins[i] <= curr)
                   pick = 1 + dp[i][curr-coins[i]];
        
                dp[i][curr]=min(pick,not_pick);
            }
        }
        int ans = dp[n-1][amount];
        return ans==1e9?-1:ans;
    }
};
