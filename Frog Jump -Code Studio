#include <bits/stdc++.h> 



//memoization



int solve(int ind,vector<int>& heights,vector<int>& dp)
{
    if(ind == 0)
        return 0;
    if(dp[ind] != -1)
        return dp[ind];
    int left_recursion = solve(ind-1,heights,dp)+abs(heights[ind]-heights[ind-1]);
    int right_recursion  = INT_MAX;
    if(ind>1)
        right_recursion = solve(ind-2,heights,dp)+abs(heights[ind-2]-heights[ind]);
    return dp[ind] = min(left_recursion,right_recursion);
}
int frogJump(int n, vector<int> &heights)
{
    vector<int>dp(n+1,-1);
    return solve(n-1,heights,dp);
}




//Now the Tabulation part





int frogJump(int n, vector<int> &heights)
{
    vector<int>dp(n+1,-1);
    dp[0] = 0;
    for(int i= 1;i<n;i++)
    {
        int left = dp[i-1]+ abs(heights[i] - heights[i-1]);
        int right  = INT_MAX;
        if(i>1)
            right = dp[i-2]+abs(heights[i] - heights[i-2]);
        dp[i] = min(left,right);
    }

return dp[n-1];
}




//now the space optimization part





int frogJump(int n, vector<int> &heights)
{
    vector<int>dp(n+1,-1);
    dp[0] = 0;
    int prev= 0;
    int prev2 = INT_MAX,curr = 0;
    for(int i= 1;i<n;i++)
    {
        int left = prev + abs(heights[i] - heights[i-1]);
        int right  = INT_MAX;
        if(i>1)
            right = prev2+abs(heights[i] - heights[i-2]);
        
        curr =  min(left,right);
        prev2 = prev;
        prev = curr;
    }

return curr;
}



