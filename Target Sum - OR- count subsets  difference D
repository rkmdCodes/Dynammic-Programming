class Solution {
public:
    
    //this question is similar to the subset sum with difference d
    
    
//recursive approach
    
    int soln(int gind,int tar,vector<int>& nums, vector<vector<int>> &dp)
    {
        if(gind == 0)
        {
            if(tar == 0 && nums[0] == 0)
                return 2;
            if(tar == 0 || tar == nums[0])
                return 1;
            return 0;
           
        }
        if(dp[gind][tar] != -1)
            return dp[gind][tar];
        int not_pick = soln(gind-1,tar,nums,dp);
        int pick = 0;
        if(tar >= nums[gind])
            pick = soln(gind-1,tar-nums[gind],nums,dp);
        
        return dp[gind][tar] = pick + not_pick; 
    }

     //tabulation
    int findTargetSumWays(vector<int>& nums, int target) {
        int total   = 0;
        for(auto it:nums)
            total += it;
        int tar = (total-target);
        if(tar%2 || tar < 0)
            return 0;
        vector<vector<int>> dp(nums.size(),vector<int>(tar/2+1,-1));
        tar /= 2;
        
       for(int gi = 0;gi<=tar;gi++)
       {
           if(gi == 0 && nums[0] == 0)
               dp[0][gi] = 2;
           else if(gi == 0 || gi == nums[0])
               dp[0][gi] = 1;
           else
               dp[0][gi] = 0;
       }
        
       for(int gi = 1;gi<nums.size();gi++)
       {
          for(int curr = 0;curr<= tar;curr++)
          {
               int not_pick = dp[gi-1][curr];//,nums,dp);
               int pick = 0;
               if(curr >= nums[gi])
                  pick = dp[gi-1][curr-nums[gi]];//,nums,dp);
        
              dp[gi][curr] = pick + not_pick; 
          }
       }
        return dp[nums.size()-1][tar];
    }
};
