#include <bits/stdc++.h> 



 //recursive solution 
int soln(int ind, int target, vector<int>& a, vector<vector<int>> &dp){
    if(ind==0){
            if(target==0 && a[0]==0)
                return 2;
            if(target==0 ||target==a[0])
                return 1;
             return 0;
        }
       
          
              
    if(dp[ind][target]!=-1)
        return dp[ind][target];
          int take=0;
          if(a[ind]<=target)
            take=soln(ind-1,target-a[ind],a,dp);
    
            int nottake=soln(ind-1,target,a,dp);
    
    return dp[ind][target]=(take+nottake);
}


//tabulatgion soln
int findWays(vector<int> &num, int tar)
{ 
   int n = num.size();
   vector<vector<int>> dp(n,vector<int>(tar+1,0));
    for(int i =0;i<n;i++)
        dp[i][0] = 1;
   if(num[0] <= tar)
       dp[0][num[0]] = 1;
   
    
    for(int i = 1;i<num.size();i++)
    {
        for(int k = 0;k<= tar;k++)
        {
            int take=0;
           if(num[i]<=k)
            take=dp[i-1][k-num[i]];
    
            int nottake=dp[i-1][k];
    
          dp[i][k]=(take+nottake);
           
            
        }
    }    
  return dp[num.size()-1][tar]; 
}
