  //recursive
    
    int lcs(int i , int j , string& s, string& t,vector<vector<int>>& dp)
    {
        if(i == 0 || j == 0)
          return 0;
      
        if(dp[i][j] != -1)
           return dp[i][j];
        
        if(s[i-1] == t[j-1])
           return 1 + lcs(i-1, j-1, s, t,dp);
        
        return dp[i][j] = max(lcs(i-1,j,s,t,dp),lcs(i,j-1,s,t,dp));
    }
    
    //tabulation format  of lcs 
    int minDistance(string s, string t) {
      int n = s.size();
      int m = t.size();
      if(n==1 && m == 1 && s[0] == t[0])
          return 0;
        
      vector<vector<int>> dp(n+1,vector<int>(m+1, 0));
        
        for(int i = 0;i<=n ; i++)
             dp[i][0] = 0;
        
        for(int j = 0;j<=m;j++)
             dp[0][j] = 0;
        
        for(int i = 1 ; i<= n ; i++)
        {
            for(int j = 1 ; j<=m ; j++)
            {
                 if(s[i-1] == t[j-1])
                     dp[i][j] = 1 + dp[i-1][j-1];//, s, t,dp);
                 else
                    dp[i][j] = max(dp[i-1][j],dp[i][j-1]);//,s,t,dp));
            }
        }
      int common = dp[n][m];  
      int dF = n - common;
      int  dS = m - common;
     return dF+dS; 
    }
