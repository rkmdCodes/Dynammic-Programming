class Solution {
public:
    
    
    //recursion soplution 
    
    
    int solve(int i , int j ,vector<vector<int>>& triangle,vector<vector<int>>& dp)
    {
        if( i == triangle.size()-1)
            return triangle[i][j];
        
        if(dp[i][j] != -1)
            return dp[i][j];
        
        int option1 = triangle[i][j] + solve(i+1,j,triangle,dp);
        int option2 = triangle[i][j] + solve(i+1,j+1,triangle,dp);
        
        return dp[i][j] = min(option1,option2);
    }

    
    //tabulation solution 
    
    
    
    int minimumTotal(vector<vector<int>>& triangle) {
        int n = triangle.size();
        vector<vector<int>> dp(n+1,vector<int>(n+1,-1));
        
       for(int j = 0;j<n;j++)
           dp[n-1][j] = triangle[n-1][j];
        
       for(int i = n-2;i>= 0;i--)
       {
           for(int j =i ;j>= 0;j--)
           {
               dp[i][j] = min(triangle[i][j]+dp[i+1][j],triangle[i][j]+dp[i+1][j+1]);
           }
       }
        
        
        return dp[0][0];
    }
};
