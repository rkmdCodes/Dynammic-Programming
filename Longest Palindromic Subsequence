    
    //recursive solution 
    
    int solve(int i , int j , string &s,string &t,vector<vector<int>>& dp)
    {
        if(i<0 || j <0)
            return 0;
        if(dp[i][j] != -1)
            return dp[i][j];
        if(s[i] == t[j])
           return 1 + solve(i-1,j-1,s,t,dp);
        return dp[i][j] = max(solve(i,j-1,s,t,dp),solve(i-1,j,s,t,dp));
    }
    
    
    //tabulation same as LCS
   
    int longestPalindromeSubseq(string S) {
        string s = S;
        int n = s.size();
        int m = n;
        reverse(S.begin(),S.end());
        string t = S;
        vector<vector<int>> dp(n+1,vector<int>(m+1,0));
    return solve(n-1,m-1,s,t,dp);
    }
};
