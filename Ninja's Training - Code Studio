#include<bits/stdc++.h>

    //recurtion solution 

int solve(int day, int last , vector<vector<int>>& points,vector<vector<int>>& dp)
{
    if(day == 0 )
    {
        int maxi = 0;
        for(int i = 0;i<3;i++)
        {
            if(i!= last)
                maxi = max(maxi,points[0][i]);
        }
    return maxi;
    }
    if(dp[day][last] != -1)
        return dp[day][last];
    int maxi = 0;
    for(int i = 0;i<3;i++)
    {
       if(i!=last)
       {
        int curr = points[day][i]+solve(day-1,i,points,dp);
        maxi = max(curr,maxi);
       }
    }
  return dp[day][last]=maxi;      
}
  
  
  
        //tabulation solution 



int ninjaTraining(int n, vector<vector<int>> &points)
{  
    vector<vector<int>> dp(n+1,vector<int>(4,-1));
    
    dp[0][1] = max(points[0][0],points[0][2]);
    dp[0][2] = max(points[0][0],points[0][1]);
    dp[0][0] = max(points[0][1],points[0][2]);
    dp[0][3] = max({points[0][0],points[0][2],points[0][3]});
    
    
    for(int i = 1;i<n;i++)
    {
        for(int last = 0;last<4;last++)
        {
            dp[i][last] = 0;
            int maxi= 0;
            for(int task = 0;task<3;task++)
            {
               if(task!=last) maxi = max(maxi,points[i][task]+dp[i-1][task]);
            }
          dp[i][last] = maxi;
        }
    }
    return dp[n-1][3];
}



    //space optimisation

int ninjaTraining(int n, vector<vector<int>> &points)
{  
    vector<int> prev(4,-1);
    
    prev[0] = max(points[0][1],points[0][2]);
    prev[1] = max(points[0][0],points[0][2]);
    prev[2] = max(points[0][0],points[0][1]);    
    prev[3] = max({points[0][0],points[0][2],points[0][3]});
    
    
    for(int i = 1;i<n;i++)
    {
        vector<int>temp(4,-1);
        for(int last = 0;last<4;last++)
        {
            temp[last] = 0;
            int maxi= 0;
            for(int task = 0;task<3;task++)
            {
               if(task!=last) temp[last] = max(temp[last],points[i][task]+prev[task]);
            }

        }
        prev = temp;
    }
    return prev[3];
}
